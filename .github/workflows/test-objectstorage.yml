name: Testing Object Storage

on:
    push:
        branches:
            - "ci/test-automation"

jobs:
    matrix-builder:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
      steps:
      - uses: actions/checkout@v4
      - id: set-matrix
        run: |
          REGIONS=$(yq eval '.regions.object_storage[]' .github/data/region.yml | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=${REGIONS}" >> $GITHUB_OUTPUT

    test-object-storage:
        name: Test
        needs: matrix-builder
        runs-on: ubuntu-latest
        strategy:
            matrix:
              region: ${{ fromJson(needs.matrix-builder.outputs.matrix) }}

        steps:
            - name: checkout branch
              uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                go-version: '1.21'  # Specify a Go version
                cache: false

            - name: Check Go Version
              run: go version

            - name: Check GOBIN
              id: go-binary
              run: echo "GOBIN=$HOME/go/bin" >> $GITHUB_OUTPUT

            - name: Run go Install 
              run: go install .

            - name: Write .terraformrc
              run: |
                cat << EOF > $HOME/.terraformrc
                provider_installation {
                  dev_overrides {
                      "NaverCloudPlatform/ncloud" = "${{ steps.go-binary.outputs.GOBIN }}"
                  }
                  direct {}
                }
                EOF

            - name: Write locals.tf
              run: |
                cat << EOF > locals.tf
                locals {
                  access_key  = "${{ secrets.NCLOUD_ACCESS_KEY }}"
                  secret_key  = "${{ secrets.NCLOUD_SECRET_KEY }}" 
                  region = "${{ matrix.region }}"
                  support_vpc = ${{ matrix.region == 'KR' || matrix.region == 'JPN' || matrix.region == 'SGN' }} 
                }
                EOF

            - name: Write provider.tf
              run: |
                cat << EOF provider.tf
                terraform {
                  required_providers {
                    ncloud = {
                      source = "NaverCloudPlatform/ncloud"
                    }
                  }
                }

                provider "ncloud" {
                  access_key  = local.access_key
                  secret_key  = local.secret_key
                  region      = local.region
                  support_vpc = local.support_vpc
                }
                EOF

            - name: Write main.tf
              run: |  
                cat << EOF > main.tf
                resource "ncloud_objectstorage_bucket" "testing_bucket" {
                  bucket_name = "geunoh-test4"
                }

                resource "ncloud_objectstorage_bucket_acl" "testing_bucket_acl" {
                  bucket_name = ncloud_objectstorage_bucket.testing_bucket.bucket_name
                  rule = "public-read"
                }

                resource "ncloud_objectstorage_object" "testing_object" {
                  bucket  = ncloud_objectstorage_bucket.testing_bucket.bucket_name
                  key     = "media/test.md"
                  source  = "./test.md"
                }

                resource "ncloud_objectstorage_object_acl" "testing_acl" {
                  object_id = ncloud_objectstorage_object.testing_object.id
                  rule      = "public-read"
                }
                EOF

            - name: Write test.md
              run: echo "hello world!" > test.md

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                terraform_version: "1.9.4"

            - name: Terraform Init
              run: terraform init

            - name: Terraform Plan
              run: terraform plan

            - name: Terraform Apply
              id: apply_step
              run: terraform apply -auto-approve

            - name: Terraform Destroy
              if: steps.apply_step.outcome == 'success'
              run: terraform destroy -auto-approve